openapi: 3.1.1
info:
  description: Title
  title: Title
  version: 1.0.0
servers:
- url: /
paths:
  /test:
    post:
      description: Test
      responses:
        "201":
          description: successfully
      tags:
      - Test
  /chains/media-storage/v1/media/:
    delete:
      description: Delete media from the server
      parameters:
      - description: The ID of the media to delete
        explode: false
        in: path
        name: media_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Media deleted successfully
        "400":
          $ref: '#/components/responses/InvalidParameter'
        "401":
          $ref: '#/components/responses/InvalidAuth'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Delete Media
      tags:
      - Media
    post:
      description: Upload media to the server
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/UploadMedia'
        required: true
      responses:
        "201":
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Media'
          description: Media uploaded successfully
        "400":
          $ref: '#/components/responses/InvalidParameter'
        "401":
          $ref: '#/components/responses/InvalidAuth'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Forbidden'
        "413":
          $ref: '#/components/responses/InvalidParameter'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Upload Media
      tags:
      - Media
  /chains/media-storage/v1/media-rules/{resource}:
    delete:
      description: Delete media Rules
      parameters:
      - description: Идентификатор ресурсной записи
        explode: false
        in: path
        name: resource
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Media Rules deleted successfully
        "400":
          $ref: '#/components/responses/InvalidParameter'
        "401":
          $ref: '#/components/responses/InvalidAuth'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Delete Media Rules
      tags:
      - Media Rules
    get:
      description: Get media Rules
      parameters:
      - description: Идентификатор ресурсной записи
        explode: false
        in: path
        name: resource
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MediaRules'
          description: Media Rules retrieved successfully
        "400":
          $ref: '#/components/responses/InvalidParameter'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Get Media Rules
      tags:
      - Media Rules
    parameters:
    - description: Идентификатор ресурсной записи
      explode: false
      in: path
      name: resource
      required: true
      schema:
        type: string
      style: simple
    patch:
      description: Update media Rules
      parameters:
      - description: Идентификатор ресурсной записи
        explode: false
        in: path
        name: resource
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/UpdateMediaRules'
        required: true
      responses:
        "201":
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MediaRules'
          description: Media Rules created successfully
        "400":
          $ref: '#/components/responses/InvalidParameter'
        "401":
          $ref: '#/components/responses/InvalidAuth'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Update Media Rules
      tags:
      - Media Rules
    post:
      description: Create media Rules
      parameters:
      - description: Идентификатор ресурсной записи
        explode: false
        in: path
        name: resource
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/CreateMediaRules'
        required: true
      responses:
        "201":
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MediaRules'
          description: Media Rules created successfully
        "400":
          $ref: '#/components/responses/InvalidParameter'
        "401":
          $ref: '#/components/responses/InvalidAuth'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/InvalidParameter'
        "500":
          $ref: '#/components/responses/InternalError'
      summary: Create Media Rules
      tags:
      - Media Rules
components:
  responses:
    InvalidParameter:
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: One of the parameters is invalid. Refer to the response body for
        details.
    InvalidAuth:
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: You must provide a valid authorization params.
    NotFound:
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Requested resource does not exist.
    Forbidden:
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Forbidden
    InternalError:
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Internal server error
    Conflict:
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Conflict
    TooManyRequests:
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Too many requests
    UnsupportedMediaType:
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Unsupported Media Type
  schemas:
    MediaCollection:
      properties:
        data:
          $ref: '#/components/schemas/MediaCollection_data'
    Media:
      properties:
        data:
          $ref: '#/components/schemas/MediaData'
      required:
      - data
    MediaData:
      properties:
        id:
          description: file name
          type: string
        type:
          enum:
          - media
          type: string
        attributes:
          $ref: '#/components/schemas/MediaAttributes'
      required:
      - attributes
      - id
      - type
    MediaAttributes:
      properties:
        format:
          description: file format
          type: string
        extension:
          description: file extension
          type: string
        size:
          description: file size in bytes
          format: int64
          type: integer
        url:
          description: media URL
          format: uri
          type: string
        resource:
          description: media resource
          type: string
        resource_id:
          description: media resource ID
          type: string
        category:
          description: media category
          type: string
        owner_id:
          description: media owner ID
          type: string
        created_at:
          description: media creation date and time
          format: date-time
          type: string
      required:
      - category
      - created_at
      - extension
      - format
      - owner_id
      - resource
      - resource_id
      - size
      - url
    UploadMedia:
      properties:
        data:
          $ref: '#/components/schemas/UploadMedia_data'
      required:
      - data
    MediaRules:
      properties:
        data:
          $ref: '#/components/schemas/MediaRulesData'
      required:
      - data
    MediaRulesData:
      properties:
        id:
          description: media rules id
          type: string
        type:
          enum:
          - media_rules
          type: string
        attributes:
          $ref: '#/components/schemas/MediaRulesAttributes'
      required:
      - attributes
      - id
      - type
    MediaRulesAttributes:
      properties:
        extensions:
          items:
            description: Indicates if the media is exit size
            type: string
          type: array
        max_size:
          description: Maximum size of the media in bytes
          format: int64
          type: integer
        roles:
          items:
            description: Roles associated with the media rules
            type: string
          type: array
        updated_at:
          description: Date and time when the media rules were last updated
          format: date-time
          type: string
        created_at:
          description: Date and time when the media rules were created
          format: date-time
          type: string
      required:
      - created_at
      - extensions
      - max_size
      - roles
      - updated_at
    CreateMediaRules:
      properties:
        data:
          $ref: '#/components/schemas/CreateMediaRules_data'
      required:
      - data
    UpdateMediaRules:
      properties:
        data:
          $ref: '#/components/schemas/UpdateMediaRules_data'
      required:
      - data
    MediaRulesCollection:
      properties:
        data:
          $ref: '#/components/schemas/MediaRulesCollection_data'
      required:
      - data
    Errors:
      description: Standard JSON:API error
      properties:
        errors:
          description: Non empty array of errors occurred during request processing
          items:
            $ref: '#/components/schemas/Errors_errors_inner'
          type: array
      required:
      - errors
    MediaCollection_data_attributes:
      properties:
        data:
          items:
            $ref: '#/components/schemas/MediaData'
          type: array
      required:
      - data
    MediaCollection_data:
      properties:
        type:
          enum:
          - media_collection
          type: string
        attributes:
          $ref: '#/components/schemas/MediaCollection_data_attributes'
      required:
      - attributes
      - type
    UploadMedia_data_attributes:
      properties:
        resource:
          description: media resource
          type: string
        resource_id:
          description: media resource ID
          type: string
        category:
          description: media category
          type: string
        owner_id:
          description: media owner ID
          type: string
      required:
      - category
      - owner_id
      - resource
      - resource_id
    UploadMedia_data:
      properties:
        type:
          enum:
          - upload_media
          type: string
        attributes:
          $ref: '#/components/schemas/UploadMedia_data_attributes'
      required:
      - attributes
      - type
    CreateMediaRules_data_attributes:
      properties:
        extensions:
          items:
            description: Indicates if the media is exit size
            type: string
          type: array
        max_size:
          description: Maximum size of the media in bytes
          format: int64
          type: integer
        roles:
          items:
            description: Roles associated with the media rules
            type: string
          type: array
      required:
      - extensions
      - max_size
      - roles
    CreateMediaRules_data:
      properties:
        id:
          description: Unique identifier for the media rules
          type: string
        type:
          enum:
          - create_media_rules
          type: string
        attributes:
          $ref: '#/components/schemas/CreateMediaRules_data_attributes'
      required:
      - attributes
      - id
      - type
    UpdateMediaRules_data_attributes:
      properties:
        extensions:
          items:
            description: Indicates if the media is exit size
            type: string
          type: array
        max_size:
          description: Maximum size of the media in bytes
          format: int64
          type: integer
        roles:
          items:
            description: Roles associated with the media rules
            type: string
          type: array
    UpdateMediaRules_data:
      properties:
        id:
          description: media rules id
          type: string
        type:
          enum:
          - update_media_rules
          type: string
        attributes:
          $ref: '#/components/schemas/UpdateMediaRules_data_attributes'
      required:
      - attributes
      - id
      - type
    MediaRulesCollection_data_attributes:
      properties:
        data:
          items:
            $ref: '#/components/schemas/MediaRulesData'
          type: array
      required:
      - data
    MediaRulesCollection_data:
      properties:
        type:
          enum:
          - media_rules_collection
          type: string
        attributes:
          $ref: '#/components/schemas/MediaRulesCollection_data_attributes'
      required:
      - attributes
      - type
    Errors_errors_inner_meta:
      properties:
        request_id:
          description: "Request ID is a unique identifier for the request, used for\
            \ debugging and tracing"
          example: 1234567890abcdef
          type: string
        timestamp:
          description: "Timestamp is the time when the error occurred, in ISO 8601\
            \ format"
          example: 2023-10-01T12:34:56Z
          format: date-time
          type: string
      required:
      - request_id
      - timestamp
    Errors_errors_inner:
      properties:
        status:
          description: Status is the HTTP status code applicable to this problem
          enum:
          - 400
          - 401
          - 403
          - 404
          - 409
          - 500
          example: 400
          type: integer
        title:
          description: "Title is a short, human-readable summary of the problem"
          example: Bad Request
          type: string
        code:
          description: "Code is an application-specific error code, expressed as a\
            \ string"
          example: invalid_request
          type: string
        detail:
          description: Detail is a human-readable explanation specific to this occurrence
            of the problem
          example: Request body was expected
          type: string
        meta:
          $ref: '#/components/schemas/Errors_errors_inner_meta'
      required:
      - code
      - detail
      - meta
      - status
      - title
