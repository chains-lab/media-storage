openapi: 3.0.0
info:
  title: Title
  description: Title
  version: 1.0.0
paths:
  /chains/media-storage/v1/media:
    post:
      tags:
        - Media
      summary: Upload Media
      description: Upload media to the server
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/UploadMedia'
      responses:
        '201':
          description: Media uploaded successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: One of the parameters is invalid. Refer to the response body for details.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: You must provide a valid authorization params.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Requested resource does not exist.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '409':
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        '500':
          description: Internal server error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /chains/media-storage/v1/media/:
    delete:
      tags:
        - Media
      summary: Delete Media
      description: Delete media from the server
      parameters:
        - name: media_id
          in: path
          required: true
          description: The ID of the media to delete
          schema:
            type: string
      responses:
        '204':
          description: Media deleted successfully
        '400':
          $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/400'
        '401':
          $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/401'
        '403':
          $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/409'
        '404':
          $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/404'
        '500':
          $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/500'
  /chains/media-storage/v1/media-rules/:
    post:
      tags:
        - Media Rules
      summary: Create Media Rules
      description: Create media Rules
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/CreateMediaRules'
      responses:
        '201':
          description: Media Rules created successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MediaRules'
        '400':
          $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/400'
        '401':
          $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/401'
        '403':
          $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/409'
        '409':
          description: Media Rules already exists
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/400'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/500'
    patch:
      tags:
        - Media Rules
      summary: Update Media Rules
      description: Update media Rules
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/UpdateMediaRules'
      responses:
        '201':
          description: Media Rules created successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MediaRules'
        '400':
          description: Bad Request
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/400'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/401'
        '403':
          description: User Not Allowed to create media rules
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/409'
        '404':
          description: Not Found Media Rules
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/404'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/500'
    delete:
      tags:
        - Media Rules
      summary: Delete Media Rules
      description: Delete media Rules
      responses:
        '204':
          description: Media Rules deleted successfully
        '400':
          description: Bad Request
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/400'
        '401':
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/401'
        '403':
          description: User Not Allowed to delete media rules
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/409'
        '404':
          description: Not Found Media Rules
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/404'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/500'
    get:
      tags:
        - Media Rules
      summary: Get Media Rules
      description: Get media Rules
      responses:
        '201':
          description: Media Rules retrieved successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MediaRules'
        '400':
          description: Bad Request
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/400'
        '404':
          description: Not Found Media Rules
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/404'
        '500':
          description: Internal Server Error
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/paths/~1chains~1media-storage~1v1~1media/post/responses/500'
components:
  schemas:
    Media:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/MediaData'
    MediaData:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          description: file name
        type:
          type: string
          enum:
            - media
        attributes:
          $ref: '#/components/schemas/MediaAttributes'
    MediaAttributes:
      type: object
      required:
        - format
        - extension
        - size
        - url
        - resource
        - resource_id
        - category
        - owner_id
        - created_at
      properties:
        format:
          type: string
          description: file format
        extension:
          type: string
          description: file extension
        size:
          type: integer
          format: int64
          description: file size in bytes
        url:
          type: string
          format: uri
          description: media URL
        resource:
          type: string
          description: media resource
        resource_id:
          type: string
          description: media resource ID
        category:
          type: string
          description: media category
        owner_id:
          type: string
          description: media owner ID
        created_at:
          type: string
          format: date-time
          description: media creation date and time
    MediaCollection:
      type: object
      required:
        - data
        - links
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - media_rules_collection
            attributes:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/MediaRulesData'
    UploadMedia:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - upload_media
            attributes:
              type: object
              required:
                - resource
                - resource_id
                - category
                - owner_id
              properties:
                resource:
                  type: string
                  description: media resource
                resource_id:
                  type: string
                  description: media resource ID
                category:
                  type: string
                  description: media category
                owner_id:
                  type: string
                  description: media owner ID
    MediaRules:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/MediaRulesData'
    MediaRulesData:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          description: media rules id
        type:
          type: string
          enum:
            - media_rules
        attributes:
          $ref: '#/components/schemas/MediaRulesAttributes'
    MediaRulesAttributes:
      type: object
      required:
        - extensions
        - max_size
        - roles
        - updated_at
        - created_at
      properties:
        extensions:
          type: array
          items:
            type: string
            description: Indicates if the media is exit size
        max_size:
          type: integer
          format: int64
          description: Maximum size of the media in bytes
        roles:
          type: array
          items:
            type: string
            description: Roles associated with the media rules
        updated_at:
          type: string
          format: date-time
          description: Date and time when the media rules were last updated
        created_at:
          type: string
          format: date-time
          description: Date and time when the media rules were created
    CreateMediaRules:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: Unique identifier for the media rules
            type:
              type: string
              enum:
                - create_media_rules
            attributes:
              type: object
              required:
                - extensions
                - max_size
                - roles
              properties:
                extensions:
                  type: array
                  items:
                    type: string
                    description: Indicates if the media is exit size
                max_size:
                  type: integer
                  format: int64
                  description: Maximum size of the media in bytes
                roles:
                  type: array
                  items:
                    type: string
                    description: Roles associated with the media rules
    UpdateMediaRules:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: media rules id
            type:
              type: string
              enum:
                - update_media_rules
            attributes:
              type: object
              properties:
                extensions:
                  type: array
                  items:
                    type: string
                    description: Indicates if the media is exit size
                max_size:
                  type: integer
                  format: int64
                  description: Maximum size of the media in bytes
                roles:
                  type: array
                  items:
                    type: string
                    description: Roles associated with the media rules
    MediaRulesCollection:
      type: object
      required:
        - data
        - links
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - media_collection
            attributes:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/MediaData'
    Errors:
      description: 'Standard JSON:API error'
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: Non empty array of errors occurred during request processing
          items:
            type: object
            required:
              - title
              - detail
              - status
              - code
              - meta
            properties:
              status:
                type: integer
                description: Status is the HTTP status code applicable to this problem
                example: 400
                enum:
                  - 400
                  - 401
                  - 403
                  - 404
                  - 409
                  - 500
              title:
                type: string
                description: 'Title is a short, human-readable summary of the problem'
                example: Bad Request
              code:
                type: string
                description: 'Code is an application-specific error code, expressed as a string'
                example: invalid_request
              detail:
                type: string
                description: Detail is a human-readable explanation specific to this occurrence of the problem
                example: Request body was expected
              meta:
                type: object
                required:
                  - request_id
                  - timestamp
                properties:
                  request_id:
                    type: string
                    description: 'Request ID is a unique identifier for the request, used for debugging and tracing'
                    example: 1234567890abcdef
                  timestamp:
                    type: string
                    format: date-time
                    description: 'Timestamp is the time when the error occurred, in ISO 8601 format'
                    example: '2023-10-01T12:34:56Z'
