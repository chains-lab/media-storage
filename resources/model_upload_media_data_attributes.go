/*
Title

Title

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UploadMediaDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadMediaDataAttributes{}

// UploadMediaDataAttributes struct for UploadMediaDataAttributes
type UploadMediaDataAttributes struct {
	// resource type
	ResourceType string `json:"resource_type"`
	// resource id
	ResourceId string `json:"resource_id"`
	// content type
	MediaType string `json:"media_type"`
	// owner id
	OwnerId *string `json:"owner_id,omitempty"`
}

type _UploadMediaDataAttributes UploadMediaDataAttributes

// NewUploadMediaDataAttributes instantiates a new UploadMediaDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadMediaDataAttributes(resourceType string, resourceId string, mediaType string) *UploadMediaDataAttributes {
	this := UploadMediaDataAttributes{}
	this.ResourceType = resourceType
	this.ResourceId = resourceId
	this.MediaType = mediaType
	return &this
}

// NewUploadMediaDataAttributesWithDefaults instantiates a new UploadMediaDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadMediaDataAttributesWithDefaults() *UploadMediaDataAttributes {
	this := UploadMediaDataAttributes{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *UploadMediaDataAttributes) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *UploadMediaDataAttributes) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *UploadMediaDataAttributes) SetResourceType(v string) {
	o.ResourceType = v
}

// GetResourceId returns the ResourceId field value
func (o *UploadMediaDataAttributes) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *UploadMediaDataAttributes) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *UploadMediaDataAttributes) SetResourceId(v string) {
	o.ResourceId = v
}

// GetMediaType returns the MediaType field value
func (o *UploadMediaDataAttributes) GetMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *UploadMediaDataAttributes) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *UploadMediaDataAttributes) SetMediaType(v string) {
	o.MediaType = v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *UploadMediaDataAttributes) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId) {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadMediaDataAttributes) GetOwnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *UploadMediaDataAttributes) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *UploadMediaDataAttributes) SetOwnerId(v string) {
	o.OwnerId = &v
}

func (o UploadMediaDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadMediaDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["media_type"] = o.MediaType
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	return toSerialize, nil
}

func (o *UploadMediaDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resource_type",
		"resource_id",
		"media_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadMediaDataAttributes := _UploadMediaDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadMediaDataAttributes)

	if err != nil {
		return err
	}

	*o = UploadMediaDataAttributes(varUploadMediaDataAttributes)

	return err
}

type NullableUploadMediaDataAttributes struct {
	value *UploadMediaDataAttributes
	isSet bool
}

func (v NullableUploadMediaDataAttributes) Get() *UploadMediaDataAttributes {
	return v.value
}

func (v *NullableUploadMediaDataAttributes) Set(val *UploadMediaDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadMediaDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadMediaDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadMediaDataAttributes(val *UploadMediaDataAttributes) *NullableUploadMediaDataAttributes {
	return &NullableUploadMediaDataAttributes{value: val, isSet: true}
}

func (v NullableUploadMediaDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadMediaDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


