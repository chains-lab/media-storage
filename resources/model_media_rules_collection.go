/*
Title

Title

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MediaRulesCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaRulesCollection{}

// MediaRulesCollection struct for MediaRulesCollection
type MediaRulesCollection struct {
	Data MediaRulesCollectionData `json:"data"`
}

type _MediaRulesCollection MediaRulesCollection

// NewMediaRulesCollection instantiates a new MediaRulesCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaRulesCollection(data MediaRulesCollectionData) *MediaRulesCollection {
	this := MediaRulesCollection{}
	this.Data = data
	return &this
}

// NewMediaRulesCollectionWithDefaults instantiates a new MediaRulesCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaRulesCollectionWithDefaults() *MediaRulesCollection {
	this := MediaRulesCollection{}
	return &this
}

// GetData returns the Data field value
func (o *MediaRulesCollection) GetData() MediaRulesCollectionData {
	if o == nil {
		var ret MediaRulesCollectionData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MediaRulesCollection) GetDataOk() (*MediaRulesCollectionData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *MediaRulesCollection) SetData(v MediaRulesCollectionData) {
	o.Data = v
}

func (o MediaRulesCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaRulesCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *MediaRulesCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaRulesCollection := _MediaRulesCollection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaRulesCollection)

	if err != nil {
		return err
	}

	*o = MediaRulesCollection(varMediaRulesCollection)

	return err
}

type NullableMediaRulesCollection struct {
	value *MediaRulesCollection
	isSet bool
}

func (v NullableMediaRulesCollection) Get() *MediaRulesCollection {
	return v.value
}

func (v *NullableMediaRulesCollection) Set(val *MediaRulesCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaRulesCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaRulesCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaRulesCollection(val *MediaRulesCollection) *NullableMediaRulesCollection {
	return &NullableMediaRulesCollection{value: val, isSet: true}
}

func (v NullableMediaRulesCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaRulesCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


