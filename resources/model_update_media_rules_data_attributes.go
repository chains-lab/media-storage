/*
Title

Title

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the UpdateMediaRulesDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMediaRulesDataAttributes{}

// UpdateMediaRulesDataAttributes struct for UpdateMediaRulesDataAttributes
type UpdateMediaRulesDataAttributes struct {
	// Maximum file size in bytes
	MaxSize *int64 `json:"max_size,omitempty"`
	AllowedExits []string `json:"allowed_exits,omitempty"`
	// Folder where the media is stored
	Folder *string `json:"folder,omitempty"`
	Roles []string `json:"roles,omitempty"`
}

// NewUpdateMediaRulesDataAttributes instantiates a new UpdateMediaRulesDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMediaRulesDataAttributes() *UpdateMediaRulesDataAttributes {
	this := UpdateMediaRulesDataAttributes{}
	return &this
}

// NewUpdateMediaRulesDataAttributesWithDefaults instantiates a new UpdateMediaRulesDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMediaRulesDataAttributesWithDefaults() *UpdateMediaRulesDataAttributes {
	this := UpdateMediaRulesDataAttributes{}
	return &this
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *UpdateMediaRulesDataAttributes) GetMaxSize() int64 {
	if o == nil || IsNil(o.MaxSize) {
		var ret int64
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMediaRulesDataAttributes) GetMaxSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxSize) {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *UpdateMediaRulesDataAttributes) HasMaxSize() bool {
	if o != nil && !IsNil(o.MaxSize) {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given int64 and assigns it to the MaxSize field.
func (o *UpdateMediaRulesDataAttributes) SetMaxSize(v int64) {
	o.MaxSize = &v
}

// GetAllowedExits returns the AllowedExits field value if set, zero value otherwise.
func (o *UpdateMediaRulesDataAttributes) GetAllowedExits() []string {
	if o == nil || IsNil(o.AllowedExits) {
		var ret []string
		return ret
	}
	return o.AllowedExits
}

// GetAllowedExitsOk returns a tuple with the AllowedExits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMediaRulesDataAttributes) GetAllowedExitsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedExits) {
		return nil, false
	}
	return o.AllowedExits, true
}

// HasAllowedExits returns a boolean if a field has been set.
func (o *UpdateMediaRulesDataAttributes) HasAllowedExits() bool {
	if o != nil && !IsNil(o.AllowedExits) {
		return true
	}

	return false
}

// SetAllowedExits gets a reference to the given []string and assigns it to the AllowedExits field.
func (o *UpdateMediaRulesDataAttributes) SetAllowedExits(v []string) {
	o.AllowedExits = v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *UpdateMediaRulesDataAttributes) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMediaRulesDataAttributes) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *UpdateMediaRulesDataAttributes) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *UpdateMediaRulesDataAttributes) SetFolder(v string) {
	o.Folder = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UpdateMediaRulesDataAttributes) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMediaRulesDataAttributes) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UpdateMediaRulesDataAttributes) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UpdateMediaRulesDataAttributes) SetRoles(v []string) {
	o.Roles = v
}

func (o UpdateMediaRulesDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMediaRulesDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxSize) {
		toSerialize["max_size"] = o.MaxSize
	}
	if !IsNil(o.AllowedExits) {
		toSerialize["allowed_exits"] = o.AllowedExits
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableUpdateMediaRulesDataAttributes struct {
	value *UpdateMediaRulesDataAttributes
	isSet bool
}

func (v NullableUpdateMediaRulesDataAttributes) Get() *UpdateMediaRulesDataAttributes {
	return v.value
}

func (v *NullableUpdateMediaRulesDataAttributes) Set(val *UpdateMediaRulesDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMediaRulesDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMediaRulesDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMediaRulesDataAttributes(val *UpdateMediaRulesDataAttributes) *NullableUpdateMediaRulesDataAttributes {
	return &NullableUpdateMediaRulesDataAttributes{value: val, isSet: true}
}

func (v NullableUpdateMediaRulesDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMediaRulesDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


