/*
Title

Title

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MediaAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaAttributes{}

// MediaAttributes struct for MediaAttributes
type MediaAttributes struct {
	// file format
	Format string `json:"format"`
	// file size in bytes
	Size int64 `json:"size"`
	// media URL
	Url string `json:"url"`
	// media creation date and time
	CreatedAt time.Time `json:"created_at"`
}

type _MediaAttributes MediaAttributes

// NewMediaAttributes instantiates a new MediaAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaAttributes(format string, size int64, url string, createdAt time.Time) *MediaAttributes {
	this := MediaAttributes{}
	this.Format = format
	this.Size = size
	this.Url = url
	this.CreatedAt = createdAt
	return &this
}

// NewMediaAttributesWithDefaults instantiates a new MediaAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaAttributesWithDefaults() *MediaAttributes {
	this := MediaAttributes{}
	return &this
}

// GetFormat returns the Format field value
func (o *MediaAttributes) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *MediaAttributes) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *MediaAttributes) SetFormat(v string) {
	o.Format = v
}

// GetSize returns the Size field value
func (o *MediaAttributes) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *MediaAttributes) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *MediaAttributes) SetSize(v int64) {
	o.Size = v
}

// GetUrl returns the Url field value
func (o *MediaAttributes) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *MediaAttributes) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *MediaAttributes) SetUrl(v string) {
	o.Url = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *MediaAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *MediaAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *MediaAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o MediaAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["format"] = o.Format
	toSerialize["size"] = o.Size
	toSerialize["url"] = o.Url
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *MediaAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"format",
		"size",
		"url",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaAttributes := _MediaAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaAttributes)

	if err != nil {
		return err
	}

	*o = MediaAttributes(varMediaAttributes)

	return err
}

type NullableMediaAttributes struct {
	value *MediaAttributes
	isSet bool
}

func (v NullableMediaAttributes) Get() *MediaAttributes {
	return v.value
}

func (v *NullableMediaAttributes) Set(val *MediaAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaAttributes(val *MediaAttributes) *NullableMediaAttributes {
	return &NullableMediaAttributes{value: val, isSet: true}
}

func (v NullableMediaAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


